/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
int a = 2;
int b = 3;
int c = 1;
formulaGeneral(a, b, c)
*/



package practica3clasesjava;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author friosa
 */
public class AnaLex7TokensApp extends javax.swing.JFrame {
    Lexico anaLex = new Lexico();
    SintDescNRP anaSintNRP = new SintDescNRP();
    private int errores = 0;
    
    private Map<String, Number> numericVariables;
    /**
     * Creates new form AnaLex7TokensApp
     */
    //Creates a new String with value puto
    String lex = "punto";
    
    public AnaLex7TokensApp() {
        initComponents();
        this.setSize(1000, 800);
        
        numericVariables = new HashMap<>();
        
        
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaProgFuente = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblParejasTL = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnAnaSin = new javax.swing.JButton();
        lblResult = new javax.swing.JLabel();
        lblResult1 = new javax.swing.JLabel();
        jlblResultErrores12 = new javax.swing.JLabel();
        jLabel_FormGen = new javax.swing.JLabel();
        formGeneral_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        DresultadosFG_lbl = new javax.swing.JLabel();
        resultadosFG_lbl1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        errorFG_lbl = new javax.swing.JLabel();
        jButton_EJEMPLOBIEN = new javax.swing.JButton();
        jButton_EJEMPLOMAL = new javax.swing.JButton();
        temps = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador Matematico");
        setBackground(new java.awt.Color(255, 153, 153));
        setForeground(new java.awt.Color(204, 204, 204));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("PROGRAMA FUENTE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(160, 40, 136, 17);

        txaProgFuente.setColumns(20);
        txaProgFuente.setRows(5);
        jScrollPane1.setViewportView(txaProgFuente);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 60, 390, 240);

        tblParejasTL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOKENS", "LEXEMAS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblParejasTL);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(440, 60, 430, 240);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("PAREJAS TOKENS-LEXEMAS ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(560, 40, 200, 17);

        btnAnaSin.setText("Análisis Lexico");
        btnAnaSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnaSinActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnaSin);
        btnAnaSin.setBounds(30, 320, 150, 30);

        lblResult.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblResult.setText("Errores Encontrados");
        getContentPane().add(lblResult);
        lblResult.setBounds(30, 360, 560, 17);

        lblResult1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblResult1.setText("Error en la linea");
        getContentPane().add(lblResult1);
        lblResult1.setBounds(30, 390, 560, 17);

        jlblResultErrores12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlblResultErrores12.setText("Resultado del Análisis");
        getContentPane().add(jlblResultErrores12);
        jlblResultErrores12.setBounds(30, 420, 560, 17);

        jLabel_FormGen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jLabel_FormGen);
        jLabel_FormGen.setBounds(30, 450, 560, 30);

        formGeneral_btn.setText("Fomula General");
        formGeneral_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formGeneral_btnActionPerformed(evt);
            }
        });
        getContentPane().add(formGeneral_btn);
        formGeneral_btn.setBounds(600, 320, 140, 30);

        jLabel3.setText("Resultados:");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 500, 70, 80);

        DresultadosFG_lbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(DresultadosFG_lbl);
        DresultadosFG_lbl.setBounds(110, 500, 480, 40);

        resultadosFG_lbl1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(resultadosFG_lbl1);
        resultadosFG_lbl1.setBounds(110, 540, 480, 40);

        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(750, 320, 120, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Error Fomula General:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 630, 140, 30);

        errorFG_lbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(errorFG_lbl);
        errorFG_lbl.setBounds(180, 630, 410, 30);

        jButton_EJEMPLOBIEN.setText("Ejemplo con plantamiento correcto");
        jButton_EJEMPLOBIEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EJEMPLOBIENActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_EJEMPLOBIEN);
        jButton_EJEMPLOBIEN.setBounds(610, 360, 240, 23);

        jButton_EJEMPLOMAL.setText("Ejemplo con plantamiento incorrecto");
        jButton_EJEMPLOMAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EJEMPLOMALActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_EJEMPLOMAL);
        jButton_EJEMPLOMAL.setBounds(610, 390, 240, 23);

        temps.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Temporales:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        getContentPane().add(temps);
        temps.setBounds(650, 440, 210, 220);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnaSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnaSinActionPerformed
        // Inicializar el analizador léxico
    anaLex.Inicia();
    // Reiniciar contador de errores
    errores = 0;
    
    // Analizar el programa fuente
    if (anaLex.Analiza(txaProgFuente.getText())) {
        // Si el análisis léxico fue exitoso, inicializar el analizador sintáctico
        anaSintNRP.Inicia();
        switch (anaSintNRP.Analiza(anaLex)) {
            // Manejar los posibles errores sintácticos
            case 1:
                jlblResultErrores12.setText("Syntax Error (1), Token no encontrado en la dentro del arreglo de Variables Terminales");
                errores++;
                break;
            case 2:
                jlblResultErrores12.setText("Syntax Error (2), No se encontro una produccion adecuada");
                errores++;
                break;
            case 0:
                lblResult.setText("Successful analysis");
                break;
        }
    } else {
        // Si hubo un error léxico, mostrar un mensaje de error
        lblResult.setText("Lexical error");
        errores++;
    }
    
    // Separar el programa fuente en líneas
    String[] lineas = txaProgFuente.getText().split("\\n");
    
    // Recorrer cada línea para buscar errores
    for (int i = 0; i < lineas.length; i++) {
        // Detectar error si falta un punto y coma al final de la línea
        if (!lineas[i].trim().endsWith(";")) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": No se encontró ';'");
            errores++;
        }
        
        
        // ---------------------------------- Prueba variable numerica = string ------------------------------------------------------------------------------------------------------
        String ultimaLinea = lineas[lineas.length - 1];

        String regex = "^(int|double|short|float|long)\\b.*";
        
        int prueba = 0;
        
        for (int io = 0; io < lineas.length; io++) {
            String linea = lineas[i].trim();
            boolean apertura2 = linea.matches(regex);

            if (apertura2) {
                prueba = 1;
            } else {
                prueba = 2;
            }

            // Para probar, podemos imprimir el valor de 'prueba' y la línea correspondiente
            System.out.println("Linea: " + linea + " -> Prueba: " + prueba);
        }
        
        if (ultimaLinea.length() >= 2) {
        char penultimoCaracter = ultimaLinea.charAt(ultimaLinea.length() - 2);

        // Verificar si el penúltimo carácter es una letra o un dígito
        if (Character.isLetter(penultimoCaracter) && prueba == 1) {
            System.out.println("El penúltimo carácter es una letra.");
            lblResult1.setText("Error en la línea " + (i + 1) + ": No se puede asignar una letra a una variable numerica");
        } else if (Character.isDigit(penultimoCaracter)) {
            System.out.println("El penúltimo carácter es un dígito.");
        } 
        }
        //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
        // Detectar error si falta llave de cierre '}'
        int apertura = lineas[i].trim().indexOf('{');
        int cierre = lineas[i].trim().indexOf('}');
        if (apertura != -1 && cierre == -1) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Se esperaba '}'");
            errores++;
        }
        
        // Detectar error si hay un if sin llaves
        if (lineas[i].trim().startsWith("if") && !lineas[i].contains("{")) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Falta llave de apertura '{'");
            errores++;
        }
        
        // Detectar error si se asigna un número decimal a una variable int
        String token = anaLex.Tokens()[i];
        String lexema = anaLex.Lexemas()[i];
        if (!asignacionNumeroDecimal(lexema, token)) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Se asignó un número decimal a una variable int.");
            errores++;
        }
        
        // Detectar error si se asigna una cadena a una variable numérica
        if (!asignacionCadenaANumero(lexema, token)) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Se asignó una cadena a una variable " + token + ".");
            errores++;
        }
        
        // Detectar error en la sintaxis del for
        if (!verificarFor(lexema)) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Sintaxis incorrecta en la instrucción 'for'.");
            errores++;
        }
        
        // Detectar el uso incorrecto de operadores dobles
        if (lineas[i].contains("++") || lineas[i].contains("--") || lineas[i].contains("//") ||
            lineas[i].contains("**") || lineas[i].contains("/*") || lineas[i].contains("*/")) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Uso incorrecto de operadores dobles");
            errores++;
        }
        
        // Detectar divisiones entre cero
        if (lineas[i].contains("/0")) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": División entre cero");
            errores++;
        }
        
        int parentesisAbiertos = 0;
        int parentesisCerrados = 0;
        for (char c : lineas[i].toCharArray()) {
            if (c == '(') {
                parentesisAbiertos++;
            } else if (c == ')') {
                parentesisCerrados++;
            }
        }
        if (parentesisAbiertos != parentesisCerrados) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Paréntesis no cerrados");
            errores++;
            break;
            }
        
        // Detectar comparaciones incompatibles
        if (lineas[i].contains("==") && lineas[i].contains("!=")) {
            lblResult1.setText("Error en la línea " + (i + 1) + ": Comparaciones incompatibles");
            errores++;
            break;
            }
            
        //Buscamos las variables numericas (int, double, etc, checar el matcher del metodo findVariables)
        
        findVariables(lineas[i]);
        jLabel_FormGen.setText("Variables numericas y sus valores: " + numericVariables);
        
        }
    
        // Mostrar el total de errores encontrados
        if (errores > 0) {
            lblResult.setText("Errors found: " + errores);
        }
        
       
        // Actualizar la tabla de tokens y lexemas
        DefaultTableModel modelo = (DefaultTableModel) tblParejasTL.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < anaLex.NoTokens(); i++) {
            Object o[] = { anaLex.Tokens()[i], anaLex.Lexemas()[i] };
            modelo.addRow(o);
        }
    }//GEN-LAST:event_btnAnaSinActionPerformed

    private void formGeneral_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formGeneral_btnActionPerformed
        // TODO add your handling code here:
        String[] lineas = txaProgFuente.getText().split("\\n");
        for (int i = 0; i < lineas.length; i++) {
            try {
                evaluateFormulaGeneral(lineas[i]);
            } catch (Exception ex) {
                Logger.getLogger(AnaLex7TokensApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_formGeneral_btnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jLabel_FormGen.setText("");
        DresultadosFG_lbl.setText("");
        resultadosFG_lbl1.setText("");
        numericVariables.clear();
        errorFG_lbl.setText("");
        temps.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_EJEMPLOBIENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EJEMPLOBIENActionPerformed
        // TODO add your handling code here:
        txaProgFuente.setText("int a = 2;\nint b = 3;\nint c = 1;\nformulaGeneral(a, b, c);");
    }//GEN-LAST:event_jButton_EJEMPLOBIENActionPerformed

    private void jButton_EJEMPLOMALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EJEMPLOMALActionPerformed
        // TODO add your handling code here:
        txaProgFuente.setText("int a = 2;\nint b = 3;\nint c = 99;\nformulaGeneral(a, b, c);");
    }//GEN-LAST:event_jButton_EJEMPLOMALActionPerformed

    
    public void ContarProducciones() {
        DefaultTableModel modelo = (DefaultTableModel) tblParejasTL.getModel();
        while(modelo.getRowCount()>0) {
            modelo.removeRow(0);
        }
        int ocurrencias;
        int indiceProd;
        int noProd=0;
        for(int i=1; i<anaSintNRP.Vns().length; i++) {
            ocurrencias=0;
            for(int j=0; j<anaSintNRP.NoDis(); j++) {
                indiceProd=anaSintNRP.Di()[j];
                noProd=anaSintNRP.Prod()[indiceProd][0];
                if(i==noProd) {
                    ocurrencias++;
                }
                if (ocurrencias >= 2) {
                    Object[] ren = new Object[2];
                    ren[0] = noProd;
                    ren[1] = "SÍ";
                    modelo.addRow(ren);
                    break;
                }
            }
        }
        
    }
    // Método para verificar si se asigna un número decimal a una variable int
    private boolean asignacionNumeroDecimal(String lexema, String token) {
        if (token.equals("int")) {
            try {
                // Intentar convertir el lexema a un entero
                int valorEntero = Integer.parseInt(lexema);
                // Si se ejecuta correctamente, no hay error
                return true;
            } catch (NumberFormatException e) {
                // Si hay una excepción, significa que el lexema no es un entero válido
                // Esto podría deberse a que se está asignando un número decimal a una variable int
                return false;
            }
        }
        return true; // Si no es una asignación de int, no hay error
    }
    
    private boolean asignacionCadenaANumero(String lexema, String token) {
        if (token.equals("int") || token.equals("double")) {
            try {
                // Intentar convertir el lexema a un número
                Double.parseDouble(lexema);
                // Si se ejecuta correctamente, no hay error
                return true;
            } catch (NumberFormatException e) {
                // Si hay una excepción, significa que el lexema no es un número válido
                // Esto podría deberse a que se está asignando una cadena a una variable int o double
                return false;
            }
        }
        return true; // Si no es una asignación de int o double, no hay error
    }
    
    private boolean verificarFor(String lexema) {
        // Verificar que el lexema contiene la palabra clave "for"
        if (!lexema.contains("for")) {
            return true; // No hay error si el lexema no contiene la palabra clave "for"
        }
        
        // Verificar si la sintaxis del for es correcta
        String[] partesFor = lexema.split("[;()]");
        // Debe haber 3 partes (inicialización, condición y actualización)
        if (partesFor.length != 3) {
            return false; // Error si no hay exactamente 3 partes separadas por ; y ()
        }
        // Verificar que la primera parte contiene una declaración de variable y asignación
        String[] declaracionFor = partesFor[0].trim().split(" ");
        if (declaracionFor.length != 4 || !declaracionFor[0].equals("for")) {
            return false; // Error si no hay 4 partes en la declaración del for o no comienza con "for"
        }
        // Verificar que la segunda parte es la condición del for
        // No se verifica más detalladamente la condición aquí
        // Si la condición no es válida, el analizador sintáctico se encargará de eso
        // Esta verificación solo asegura que hay una expresión en la condición
        if (partesFor[1].trim().isEmpty()) {
            return false; // Error si la condición está vacía
        }
        // Verificar que la tercera parte es la actualización del for
        // No se verifica más detalladamente la actualización aquí
        // Si la actualización no es válida, el analizador sintáctico se encargará de eso
        // Esta verificación solo asegura que hay una expresión en la actualización
        if (partesFor[2].trim().isEmpty()) {
            return false; // Error si la actualización está vacía
        }
        
        return true; // Si no se encontraron errores, el for está bien formado
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnaLex7TokensApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnaLex7TokensApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnaLex7TokensApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnaLex7TokensApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnaLex7TokensApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DresultadosFG_lbl;
    private javax.swing.JButton btnAnaSin;
    private javax.swing.JLabel errorFG_lbl;
    private javax.swing.JButton formGeneral_btn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_EJEMPLOBIEN;
    private javax.swing.JButton jButton_EJEMPLOMAL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_FormGen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jlblResultErrores12;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblResult1;
    private javax.swing.JLabel resultadosFG_lbl1;
    private javax.swing.JTable tblParejasTL;
    private javax.swing.JLabel temps;
    private javax.swing.JTextArea txaProgFuente;
    // End of variables declaration//GEN-END:variables

    private void caracter(String[] Lexemas, int i) {
        if(Lexemas[i].length()>3){
                         //Si su longitud es mayor que tres, es que tenemos un octal.
                         //o hexadecimal
                        String tex = Lexemas[i].substring(1,Lexemas[i].length()-1);
                        int k=0;
                        if(tex.charAt(1)=='x'){
                            //Si tiene una x, es hexadecimal y tomamos todo, desde
                                //después de la x (por ello el substring(2), toma toda
                                //la cadena desde el indice dos hasta el final), 
                                //
                                //el 16, para usar el sistema hexadecimal.
                            k = Integer.parseInt(tex.substring(2),16);
                            //O también puede ser que tenga una h al final, para.
                                //Aplica lo mismo
                        }else if(tex.charAt(tex.length()-1)=='h'){
                            k = Integer.parseInt(tex.substring(0,tex.length()-1),16);
                        }else
                            //Aquí llegamos si es un octal. Por suerte, la clase
                            //Integer con su parse se encarga de esto.
                            try{
                            k = Integer.parseInt(tex,8);}catch(NumberFormatException e){
                                System.out.println("Introduce un caracter valido"+e.getMessage());
                            }
                        //char c = 1;
                        //Lo convertimos a char para almacenarlo
                        char c = (char)k;
                        Lexemas[i] = Character.toString(c);
                    }
    }
    
    //METIDOOOO MAMALON PARA BUSCAR E IDENTIFICAR VARIABLES DE TIPO NUMERICAS
    
        private void findVariables(String text) {
        //PATRON DE IDENTIFICACION DE VARIABLES
        
        String variablePattern = "\\b(int|double|float|long|short)\\s+(\\w+)\\s*=\\s*([-+]?\\d*\\.?\\d+);";
        Pattern pattern = Pattern.compile(variablePattern);
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            String type = matcher.group(1);
            String name = matcher.group(2);
            String value = matcher.group(3);

            switch (type) {
                case "int":
                    //LO AGREGAMOS AL AL HASHMAP SI ES NUMERICO PA
                    numericVariables.put(name, Integer.parseInt(value));
                    break;
                case "double":
                    numericVariables.put(name, Double.parseDouble(value));
                    break;
                case "float":
                    numericVariables.put(name, Float.parseFloat(value));
                    break;
                case "long":
                    numericVariables.put(name, Long.parseLong(value));
                    break;
                case "short":
                    numericVariables.put(name, Short.parseShort(value));
                    break;
                default:
                    
                    break;
            }
        }
    }
        
        //Metodos para formula general
        
        private void evaluateFormulaGeneral(String expression) throws Exception {
            // Busca formulaGeneral() y saca el valor de las variables
            Pattern pattern = Pattern.compile("formulaGeneral\\((\\w+),\\s*(\\w+),\\s*(\\w+)\\)");
            Matcher matcher = pattern.matcher(expression);
                if (matcher.find()) {
                    String aVar = matcher.group(1);
                    String bVar = matcher.group(2);
                    String cVar = matcher.group(3);

                    // Get the values of the variables
                    double a = numericVariables.get(aVar).doubleValue();
                    double b = numericVariables.get(bVar).doubleValue();
                    double c = numericVariables.get(cVar).doubleValue();

                    // Evaluate the quadratic formula
                    double temp1 = Math.pow(b, 2); // b^2
                    double temp2 = 4 * a;          // 4a
                    double temp3 = temp2 * c;       //4ac
                    double temp4 = temp1 - temp3; //b^2 - 4ac
                    
                    double d = temp4;
                    DresultadosFG_lbl.setText("<html>Valor de d: <b>" + d + "</b></html>");
                    //System.out.println("Value of d: " + d);

                    if (d < 0) {
                        errorFG_lbl.setText("<html>La solucion no es real. <b>Numeros imaginarios</b></html>");
                        System.out.println("NO, FALLO!!! CHeCA el plantamiento del ejercicio manco");
                    } else {
                        double temp5 = -b;
                        double temp6 = 2 * a;
                        double temp7 = Math.sqrt(d);
                        double temp8 = temp5 + temp7;
                        double temp9 = temp5 - temp7; //alterno
                        double temp10 = temp8 / temp6;
                        double temp11 = temp9 / temp6; //alterno
                        
                        
                        double x1 = (-b + Math.sqrt(d)) / (2 * a);
                        double x2 = (-b - Math.sqrt(d)) / (2 * a);

                        numericVariables.put("x1", x1);
                        numericVariables.put("x2", x2);
                        
                        resultadosFG_lbl1.setText("<html>x1: <b>" + x1 + "</b> x2: <b>" + x2 + "</b></html>");
                        temps.setText("<html>temp1: "+temp1+ " -> <em>b^2</em><br>" +
                                "temp2: "+temp2 + " -> <em>4a</em><br>" +
                                "temp3: "+temp3 + " -> <em>4ac</em><br>" +
                                "temp4: "+temp4 + " -> <em>b^2 - 4ac</em><br>" +
                                "temp5: "+temp5 + " -> <em>- b</em><br>" +
                                "temp6: "+temp6 + "  -> <em>2 * a</em><br>" +
                                "temp7: "+temp7 + " -> <em>sqrt(b^2 - 4ac)</em><br>" +
                                "temp8: "+temp8 + " -> <em>- b <b>+</b> sqrt(b^2 - 4ac)</em><br>" +
                                "temp9: "+temp9 + " -> <em>- b <b>-</b> sqrt(b^2 - 4ac)</em><br>" +
                                "temp10: "+temp10 + " -> <em><b>+</b> /(2a)</em><br>" +
                                "temp11: "+temp11 +" -> <em><b>-</b> /(2a)</em></html>");
                        //System.out.println("x1: " + x1);
                        //System.out.println("x2: " + x2);
                    }
                } else {
                    errorFG_lbl.setText("No se encontro error en el calculo");
                }            
        }
        
        
}
